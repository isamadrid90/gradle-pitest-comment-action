name: 'Gradle Pitest with summary comment'
description: 'Action to execute pitest in a project with gradle and leave a comment with the summary of the execution'
inputs:
  repo-token:
    description: 'Repository secret'
    required: true
  reports-retention:
    description: 'Amount of days to retain the reports as artifact'
    required: false
    default: "1"
  reports-path:
    description: 'The path where the pitest reports are generated'
    required: false
    default: "build/reports/pitest"
  working-directory:
    description: 'The directory where gradle can be executed'
    required: false
    default: .
runs:
  using: "composite"
  steps:
    - name: Grant execute permission for gradlew
      working-directory: ${{ inputs.working-directory }}
      run: chmod +x gradlew
      shell: bash

    - name: Build with Gradle
      run: ./gradlew clean assemble
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Execute PITest
      working-directory: ${{ inputs.working-directory }}
      run: |
        MUTATION_TEST=$(./gradlew pitest)     
        PIT_RESULT=${MUTATION_TEST##*Task :pitest}
        STATISTICS=${PIT_RESULT##*- Statistics}
        SUMMARY=${STATISTICS%%Enhanced*}
        echo "summary_mutation=$(echo ${SUMMARY%%B*})" >> $GITHUB_OUTPUT
      id: mutation-test-execution
      shell: bash

    - name: Upload report
      uses: actions/upload-artifact@v3
      with:
        name: reports-artifact
        path: ${{ inputs.reports-path }}
        retention-days: ${{ inputs.reports-retention }}

    - uses: actions/github-script@v7
      id: get_issue_number
      with:
        script: |
          if (context.issue.number) {
            // Return issue number if present
            return context.issue.number;
          } else {
            // Otherwise return issue number from commit
            return (
              await github.rest.repos.listPullRequestsAssociatedWithCommit({
                commit_sha: context.sha,
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
            ).data[0].number;
          }
        result-encoding: string

    - name: Comment on Pull Request
      uses: actions/github-script@v7
      env:
        PR: ${{ steps.get_issue_number.outputs.result }}
        MUTATION: ${{ steps.mutation-test-execution.outputs.summary_mutation }}
      with:
        script: |
          const mutationSummary = "${{ env.MUTATION }}"
          if (!mutationSummary) {
            //if the value is empty, undefined or null only the error is log
            console.error("Empty Mutation Summary")
          } else {
            const prNumber = '${{ env.PR }}';
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            const mutationSummaryFormatted = mutationSummary.replace(/=/g, '').replace(/>>/g, '\n')
            const message = "🧟‍♀ Mutation Testing Summary ️🧟‍♀️\n" +
              "================================ \n" +
              mutationSummaryFormatted +
              "\n" +
              "Check artifacts for the complete report"
            
            // Post comment
            await github.rest.issues.createComment({
              owner: repoOwner,
              repo: repoName,
              issue_number: prNumber,
              body: message
            });
          }



